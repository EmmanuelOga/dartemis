
[
  {
    "kind": "library",
    "name": "dartemis",
    "children": [
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nThe primary instance for the framework. It contains all the managers.\n\nYou must use this to create, delete and retrieve entities.\n\nIt is also important to set the delta each game loop iteration, and initialize before game loop.\n\n",
        "name": "World",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "World",
            "id": "World0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nMakes sure all managers systems are initialized in the order they were\nadded.\n\n",
            "name": "initialize",
            "id": "initialize0()"
          },
          {
            "returnType": {
              "name": "EntityManager",
              "refId": "EntityManager"
            },
            "kind": "method",
            "comment": "\nReturns a manager that takes care of all the entities in the world.\nentities of this world.\n\n",
            "name": "entityManager",
            "id": "entityManager0()"
          },
          {
            "returnType": {
              "name": "ComponentManager",
              "refId": "ComponentManager"
            },
            "kind": "method",
            "comment": "\nReturns a manager that takes care of all the components in the world.\n\n",
            "name": "componentManager",
            "id": "componentManager0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAdd a manager into this world. It can be retrieved later. World will\nnotify this manager of changes to entity.\n\n",
            "name": "addManager",
            "children": [
              {
                "ref": {
                  "name": "Manager",
                  "refId": "Manager"
                },
                "kind": "param",
                "name": "manager",
                "id": "manager"
              }
            ],
            "id": "addManager1()"
          },
          {
            "returnType": {
              "name": "Manager",
              "refId": "Manager"
            },
            "kind": "method",
            "comment": "\nReturns a [Manager] of the specified [managerType].\n\n",
            "name": "getManager",
            "children": [
              {
                "ref": {
                  "name": "Type",
                  "refId": "Type"
                },
                "kind": "param",
                "name": "managerType",
                "id": "managerType"
              }
            ],
            "id": "getManager1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDeletes the manager from this world.\n\n",
            "name": "deleteManager",
            "children": [
              {
                "ref": {
                  "name": "Manager",
                  "refId": "Manager"
                },
                "kind": "param",
                "name": "manager",
                "id": "manager"
              }
            ],
            "id": "deleteManager1()"
          },
          {
            "returnType": {
              "name": "Entity",
              "refId": "Entity"
            },
            "kind": "method",
            "comment": "\nCreate and return a new or reused [Entity] instance.\n\n",
            "name": "createEntity",
            "id": "createEntity0()"
          },
          {
            "returnType": {
              "name": "Entity",
              "refId": "Entity"
            },
            "kind": "method",
            "comment": "\nGet an [Entity] having the specified [entityId].\n\n",
            "name": "getEntity",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "entityId",
                "id": "entityId"
              }
            ],
            "id": "getEntity1()"
          },
          {
            "returnType": {
              "name": "ImmutableBag",
              "refId": "ImmutableBag",
              "arguments": [
                {
                  "name": "EntitySystem",
                  "refId": "EntitySystem"
                }
              ]
            },
            "kind": "method",
            "comment": "\nGives you all the systems in this world for possible iteration.\n\n",
            "name": "systems",
            "id": "systems0()"
          },
          {
            "returnType": {
              "name": "EntitySystem",
              "refId": "EntitySystem"
            },
            "kind": "method",
            "comment": "\nAdds a system to this world that will be processed by World.process().\nIf [passive] is set to true the system will not be processed by the world.\n\n",
            "name": "addSystem",
            "children": [
              {
                "ref": {
                  "name": "EntitySystem",
                  "refId": "EntitySystem"
                },
                "kind": "param",
                "name": "system",
                "id": "system"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "isOptional": true,
                "kind": "param",
                "name": "passive",
                "id": "passive"
              }
            ],
            "id": "addSystem2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nRemoved the specified system from the world.\n\n",
            "name": "deleteSystem",
            "children": [
              {
                "ref": {
                  "name": "EntitySystem",
                  "refId": "EntitySystem"
                },
                "kind": "param",
                "name": "system",
                "id": "system"
              }
            ],
            "id": "deleteSystem1()"
          },
          {
            "returnType": {
              "name": "EntitySystem",
              "refId": "EntitySystem"
            },
            "kind": "method",
            "comment": "\nRetrieve a system for specified system type.\n\n",
            "name": "getSystem",
            "children": [
              {
                "ref": {
                  "name": "Type",
                  "refId": "Type"
                },
                "kind": "param",
                "name": "type",
                "id": "type"
              }
            ],
            "id": "getSystem1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nPerforms an action on each entity.\n\n",
            "name": "_check",
            "children": [
              {
                "ref": {
                  "name": "Bag",
                  "refId": "Bag",
                  "arguments": [
                    {
                      "name": "Entity",
                      "refId": "Entity"
                    }
                  ]
                },
                "kind": "param",
                "name": "entities",
                "id": "entities"
              },
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "perform",
                "id": "perform"
              }
            ],
            "id": "_check2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nProcess all non-passive systems.\n\n",
            "name": "process",
            "id": "process0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "processEntityChanges",
            "id": "processEntityChanges0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAdds a [Entity e] to this world.\n\n",
            "name": "addEntity",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "addEntity1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nEnsure all systems are notified of changes to this [Entity e]. If you're\nadding a [Component] to an [Entity] after it's been added to the world, then\nyou need to invoke this method.\n\n",
            "name": "changedEntity",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "changedEntity1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDelete the [Entity e] from the world.\n\n",
            "name": "deleteEntity",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "deleteEntity1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\n(Re)enable the [Entity e] in the world, after it having being disabled. Won't\ndo anything unless it was already disabled.\n\n",
            "name": "enable",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "enable1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDisable the [Entity e] from being processed. Won't delete it, it will\ncontinue to exist but won't get processed.\n\n",
            "name": "disable",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "disable1()"
          },
          {
            "ref": {
              "name": "EntityManager",
              "refId": "EntityManager"
            },
            "kind": "property",
            "comment": "\nReturns a manager that takes care of all the entities in the world.\nentities of this world.\n\n",
            "name": "entityManager",
            "id": "entityManager"
          },
          {
            "ref": {
              "name": "ComponentManager",
              "refId": "ComponentManager"
            },
            "kind": "property",
            "comment": "\nReturns a manager that takes care of all the components in the world.\n\n",
            "name": "componentManager",
            "id": "componentManager"
          },
          {
            "ref": {
              "name": "ImmutableBag",
              "refId": "ImmutableBag",
              "arguments": [
                {
                  "name": "EntitySystem",
                  "refId": "EntitySystem"
                }
              ]
            },
            "kind": "property",
            "comment": "\nGives you all the systems in this world for possible iteration.\n\n",
            "name": "systems",
            "id": "systems"
          },
          {
            "ref": {
              "name": "EntityManager",
              "refId": "EntityManager"
            },
            "kind": "property",
            "name": "_entityManager",
            "id": "_entityManager"
          },
          {
            "ref": {
              "name": "ComponentManager",
              "refId": "ComponentManager"
            },
            "kind": "property",
            "name": "_componentManager",
            "id": "_componentManager"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                }
              ]
            },
            "kind": "property",
            "name": "_added",
            "id": "_added"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                }
              ]
            },
            "kind": "property",
            "name": "_changed",
            "id": "_changed"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                }
              ]
            },
            "kind": "property",
            "name": "_deleted",
            "id": "_deleted"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                }
              ]
            },
            "kind": "property",
            "name": "_enable",
            "id": "_enable"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                }
              ]
            },
            "kind": "property",
            "name": "_disable",
            "id": "_disable"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "Type",
                  "refId": "Type"
                },
                {
                  "name": "EntitySystem",
                  "refId": "EntitySystem"
                }
              ]
            },
            "kind": "property",
            "name": "_systems",
            "id": "_systems"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "EntitySystem",
                  "refId": "EntitySystem"
                }
              ]
            },
            "kind": "property",
            "name": "_systemsBag",
            "id": "_systemsBag"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "Type",
                  "refId": "Type"
                },
                {
                  "name": "Manager",
                  "refId": "Manager"
                }
              ]
            },
            "kind": "property",
            "name": "_managers",
            "id": "_managers"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Manager",
                  "refId": "Manager"
                }
              ]
            },
            "kind": "property",
            "name": "_managersBag",
            "id": "_managersBag"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "delta",
            "id": "delta"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "World",
            "id": "World0()"
          }
        ],
        "id": "World"
      },
      {
        "superclass": {
          "name": "Manager",
          "refId": "Manager"
        },
        "kind": "class",
        "comment": "\nUse this class together with PlayerManager.\n\nYou may sometimes want to create teams in your game, so that\nsome players are team mates.\n\nA player can only belong to a single team.\n\n",
        "name": "TeamManager",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TeamManager",
            "id": "TeamManager0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "id": "initialize0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "getTeam",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "player",
                "id": "player"
              }
            ],
            "id": "getTeam1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setTeam",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "player",
                "id": "player"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "team",
                "id": "team"
              }
            ],
            "id": "setTeam2()"
          },
          {
            "returnType": {
              "name": "ImmutableBag",
              "refId": "ImmutableBag",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "method",
            "name": "getPlayers",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "team",
                "id": "team"
              }
            ],
            "id": "getPlayers1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "removeFromTeam",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "player",
                "id": "player"
              }
            ],
            "id": "removeFromTeam1()"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "Bag",
                  "refId": "Bag",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                }
              ]
            },
            "kind": "property",
            "name": "_playersByTeam",
            "id": "_playersByTeam"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "name": "_teamByPlayer",
            "id": "_teamByPlayer"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TeamManager",
            "id": "TeamManager0()"
          }
        ],
        "id": "TeamManager"
      },
      {
        "superclass": {
          "name": "Manager",
          "refId": "Manager"
        },
        "kind": "class",
        "comment": "\nIf you need to tag any entity, use this. A typical usage would be to tag\nentities such as \"PLAYER\", \"BOSS\" or something that is very unique.\n\n",
        "name": "TagManager",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TagManager",
            "id": "TagManager0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "register",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "tag",
                "id": "tag"
              },
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "register2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "unregister",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "tag",
                "id": "tag"
              }
            ],
            "id": "unregister1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isRegistered",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "tag",
                "id": "tag"
              }
            ],
            "id": "isRegistered1()"
          },
          {
            "returnType": {
              "name": "Entity",
              "refId": "Entity"
            },
            "kind": "method",
            "name": "getEntity",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "tag",
                "id": "tag"
              }
            ],
            "id": "getEntity1()"
          },
          {
            "returnType": {
              "name": "Collection",
              "refId": "Collection",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "method",
            "name": "getRegisteredTags",
            "id": "getRegisteredTags0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "deleted",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "deleted1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "id": "initialize0()"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "Entity",
                  "refId": "Entity"
                }
              ]
            },
            "kind": "property",
            "name": "_entitiesByTag",
            "id": "_entitiesByTag"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                },
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "name": "_tagsByEntity",
            "id": "_tagsByEntity"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TagManager",
            "id": "TagManager0()"
          }
        ],
        "id": "TagManager"
      },
      {
        "superclass": {
          "name": "Manager",
          "refId": "Manager"
        },
        "kind": "class",
        "comment": "\nYou may sometimes want to specify to which player an entity belongs to.\n\nAn entity can only belong to a single player at a time.\n\n",
        "name": "PlayerManager",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "PlayerManager",
            "id": "PlayerManager0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setPlayer",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "player",
                "id": "player"
              }
            ],
            "id": "setPlayer2()"
          },
          {
            "returnType": {
              "name": "ImmutableBag",
              "refId": "ImmutableBag",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                }
              ]
            },
            "kind": "method",
            "name": "getEntitiesOfPlayer",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "player",
                "id": "player"
              }
            ],
            "id": "getEntitiesOfPlayer1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "removeFromPlayer",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "removeFromPlayer1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "getPlayer",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "getPlayer1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "id": "initialize0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "deleted",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "deleted1()"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                },
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "property",
            "name": "_playerByEntity",
            "id": "_playerByEntity"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "Bag",
                  "refId": "Bag",
                  "arguments": [
                    {
                      "name": "Entity",
                      "refId": "Entity"
                    }
                  ]
                }
              ]
            },
            "kind": "property",
            "name": "_entitiesByPlayer",
            "id": "_entitiesByPlayer"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "PlayerManager",
            "id": "PlayerManager0()"
          }
        ],
        "id": "PlayerManager"
      },
      {
        "superclass": {
          "name": "Manager",
          "refId": "Manager"
        },
        "kind": "class",
        "comment": "\nIf you need to group your entities together, e.g. tanks going into \"units\" group or explosions into \"effects\",\nthen use this manager. You must retrieve it using world instance.\n\nAn [Entity] can only belong to one group at a time.\n\n",
        "name": "GroupManager",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "GroupManager",
            "id": "GroupManager0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "id": "initialize0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSet the group of the entity.\n\n",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "group",
                "id": "group"
              }
            ],
            "id": "add2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nRemove the entity from the specified group.\n\n",
            "name": "remove",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "group",
                "id": "group"
              }
            ],
            "id": "remove2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "removeFromAllGroups",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "removeFromAllGroups1()"
          },
          {
            "returnType": {
              "name": "ImmutableBag",
              "refId": "ImmutableBag",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                }
              ]
            },
            "kind": "method",
            "comment": "\nGet all entities that belong to the provided group.\n\n",
            "name": "getEntities",
            "children": [
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "group",
                "id": "group"
              }
            ],
            "id": "getEntities1()"
          },
          {
            "returnType": {
              "name": "ImmutableBag",
              "refId": "ImmutableBag",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                }
              ]
            },
            "kind": "method",
            "comment": "\nReturns the groups the entity belongs to, null if none.\n\n",
            "name": "getGroups",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "getGroups1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nChecks if the entity belongs to any group.\n\n",
            "name": "isInAnyGroup",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "isInAnyGroup1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nCheck if the entity is in the supplied group.\n\n",
            "name": "isInGroup",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "group",
                "id": "group"
              }
            ],
            "id": "isInGroup2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "deleted",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "deleted1()"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "String",
                  "refId": "String"
                },
                {
                  "name": "Bag",
                  "refId": "Bag",
                  "arguments": [
                    {
                      "name": "Entity",
                      "refId": "Entity"
                    }
                  ]
                }
              ]
            },
            "kind": "property",
            "name": "_entitiesByGroup",
            "id": "_entitiesByGroup"
          },
          {
            "ref": {
              "name": "Map",
              "refId": "Map",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                },
                {
                  "name": "Bag",
                  "refId": "Bag",
                  "arguments": [
                    {
                      "name": "String",
                      "refId": "String"
                    }
                  ]
                }
              ]
            },
            "kind": "property",
            "name": "_groupsByEntity",
            "id": "_groupsByEntity"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "GroupManager",
            "id": "GroupManager0()"
          }
        ],
        "id": "GroupManager"
      },
      {
        "interfaces": [
          {
            "name": "EntityObserver",
            "refId": "EntityObserver"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nManager.\n\n",
        "name": "Manager",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "id": "initialize0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "added",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "added1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "changed",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "changed1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "deleted",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "deleted1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "disabled",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "disabled1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "enabled",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "enabled1()"
          },
          {
            "ref": {
              "name": "World",
              "refId": "World"
            },
            "kind": "property",
            "name": "_world",
            "id": "_world"
          }
        ],
        "id": "Manager"
      },
      {
        "superclass": {
          "name": "EntitySystem",
          "refId": "EntitySystem"
        },
        "kind": "class",
        "comment": "\nThis system has an empty aspect so it processes no entities, but it still gets invoked.\nYou can use this system if you need to execute some game logic and not have to concern\nyourself about aspects or entities.\n\n",
        "name": "VoidEntitySystem",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "VoidEntitySystem",
            "id": "VoidEntitySystem0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "processEntities",
            "children": [
              {
                "ref": {
                  "name": "ImmutableBag",
                  "refId": "ImmutableBag",
                  "arguments": [
                    {
                      "name": "Entity",
                      "refId": "Entity"
                    }
                  ]
                },
                "kind": "param",
                "name": "entities",
                "id": "entities"
              }
            ],
            "id": "processEntities1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "processSystem",
            "id": "processSystem0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "checkProcessing",
            "id": "checkProcessing0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "VoidEntitySystem",
            "id": "VoidEntitySystem0()"
          }
        ],
        "id": "VoidEntitySystem"
      },
      {
        "superclass": {
          "name": "IntervalEntitySystem",
          "refId": "IntervalEntitySystem"
        },
        "kind": "class",
        "comment": "\nIf you need to process entities at a certain interval then use this.\nA typical usage would be to regenerate ammo or health at certain intervals, no need\nto do that every game loop, but perhaps every 100 ms. or every second.\n\n",
        "name": "IntervalEntityProcessingSystem",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nCreate a new [IntervalEntityProcessingSystem]. It requires at least one component.\n\n",
            "name": "IntervalEntityProcessingSystem",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "interval",
                "id": "interval"
              },
              {
                "ref": {
                  "name": "Aspect",
                  "refId": "Aspect"
                },
                "kind": "param",
                "name": "aspect",
                "id": "aspect"
              }
            ],
            "id": "IntervalEntityProcessingSystem2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nProcess an [entity] this system is interested in.\n\n",
            "name": "processEntity",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "entity",
                "id": "entity"
              }
            ],
            "id": "processEntity1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "processEntities",
            "children": [
              {
                "ref": {
                  "name": "ImmutableBag",
                  "refId": "ImmutableBag",
                  "arguments": [
                    {
                      "name": "Entity",
                      "refId": "Entity"
                    }
                  ]
                },
                "kind": "param",
                "name": "entities",
                "id": "entities"
              }
            ],
            "id": "processEntities1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nCreate a new [IntervalEntityProcessingSystem]. It requires at least one component.\n\n",
            "name": "IntervalEntityProcessingSystem",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "interval",
                "id": "interval"
              },
              {
                "ref": {
                  "name": "Aspect",
                  "refId": "Aspect"
                },
                "kind": "param",
                "name": "aspect",
                "id": "aspect"
              }
            ],
            "id": "IntervalEntityProcessingSystem2()"
          }
        ],
        "id": "IntervalEntityProcessingSystem"
      },
      {
        "superclass": {
          "name": "EntitySystem",
          "refId": "EntitySystem"
        },
        "kind": "class",
        "comment": "\nA system that processes entities at a interval in milliseconds.\nA typical usage would be a collision system or physics system.\n\n",
        "name": "IntervalEntitySystem",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "IntervalEntitySystem",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "interval",
                "id": "interval"
              },
              {
                "ref": {
                  "name": "Aspect",
                  "refId": "Aspect"
                },
                "kind": "param",
                "name": "aspect",
                "id": "aspect"
              }
            ],
            "id": "IntervalEntitySystem2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "checkProcessing",
            "id": "checkProcessing0()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_acc",
            "id": "_acc"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "interval",
            "id": "interval"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "IntervalEntitySystem",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "interval",
                "id": "interval"
              },
              {
                "ref": {
                  "name": "Aspect",
                  "refId": "Aspect"
                },
                "kind": "param",
                "name": "aspect",
                "id": "aspect"
              }
            ],
            "id": "IntervalEntitySystem2()"
          }
        ],
        "id": "IntervalEntitySystem"
      },
      {
        "superclass": {
          "name": "EntitySystem",
          "refId": "EntitySystem"
        },
        "kind": "class",
        "comment": "\nThe purpose of this class is to allow systems to execute at varying intervals.\n\nAn example system would be an ExpirationSystem, that deletes entities after a certain\nlifetime. Instead of running a system that decrements a timeLeft value for each\nentity, you can simply use this system to execute in a future at a time of the shortest\nlived entity, and then reset the system to run at a time in a future at a time of the\nshortest lived entity, etc.\n\nAnother example system would be an AnimationSystem. You know when you have to animate\na certain entity, e.g. in 300 milliseconds. So you can set the system to run in 300 ms.\nto perform the animation.\n\nThis will save CPU cycles in some scenarios.\n\nImplementation notes:\nIn order to start the system you need to override the inserted(Entity e) method,\nlook up the delay time from that entity and offer it to the system by using the\nofferDelay(num delay) method.\nAlso, when processing the entities you must also call offerDelay(num delay)\nfor all valid entities.\n\n",
        "name": "DelayedEntityProcessingSystem",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "DelayedEntityProcessingSystem",
            "children": [
              {
                "ref": {
                  "name": "Aspect",
                  "refId": "Aspect"
                },
                "kind": "param",
                "name": "aspect",
                "id": "aspect"
              }
            ],
            "id": "DelayedEntityProcessingSystem1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nReturn the delay until this entity should be processed.\n\n",
            "name": "getRemainingDelay",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "getRemainingDelay1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nProcess a entity this system is interested in. Substract the accumulatedDelta\nfrom the entities defined delay.\n\n",
            "name": "processDelta",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "accumulatedDelta",
                "id": "accumulatedDelta"
              }
            ],
            "id": "processDelta2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "processExpired",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "processExpired1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "processEntities",
            "children": [
              {
                "ref": {
                  "name": "ImmutableBag",
                  "refId": "ImmutableBag",
                  "arguments": [
                    {
                      "name": "Entity",
                      "refId": "Entity"
                    }
                  ]
                },
                "kind": "param",
                "name": "entities",
                "id": "entities"
              }
            ],
            "id": "processEntities1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "inserted",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "inserted1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "checkProcessing",
            "id": "checkProcessing0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nStart processing of entities after a certain amount of delta time.\n\nCancels current delayed run and starts a new one.\n\n",
            "name": "restart",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "delay",
                "id": "delay"
              }
            ],
            "id": "restart1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nRestarts the system only if the delay offered is shorter than the\ntime that the system is currently scheduled to execute at.\n\nIf the system is already stopped (not running) then the offered\ndelay will be used to restart the system with no matter its value.\n\nIf the system is already counting down, and the offered delay is\nlarger than the time remaining, the system will ignore it. If the\noffered delay is shorter than the time remaining, the system will\nrestart itself to run at the offered delay.\n\n",
            "name": "offerDelay",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "delay",
                "id": "delay"
              }
            ],
            "id": "offerDelay1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nGet the initial delay that the system was ordered to process entities after.\n\n",
            "name": "getInitialTimeDelay",
            "id": "getInitialTimeDelay0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nGet the time until the system is scheduled to run at.\nReturns zero (0) if the system is not running.\nUse isRunning() before checking this value.\n\n",
            "name": "getRemainingTimeUntilProcessing",
            "id": "getRemainingTimeUntilProcessing0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nCheck if the system is counting down towards processing.\n\n",
            "name": "isRunning",
            "id": "isRunning0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nStops the system from running, aborts current countdown.\nCall offerDelay or restart to run it again.\n\n",
            "name": "stop",
            "id": "stop0()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "delay",
            "id": "delay"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "running",
            "id": "running"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "acc",
            "id": "acc"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "DelayedEntityProcessingSystem",
            "children": [
              {
                "ref": {
                  "name": "Aspect",
                  "refId": "Aspect"
                },
                "kind": "param",
                "name": "aspect",
                "id": "aspect"
              }
            ],
            "id": "DelayedEntityProcessingSystem1()"
          }
        ],
        "id": "DelayedEntityProcessingSystem"
      },
      {
        "superclass": {
          "name": "EntitySystem",
          "refId": "EntitySystem"
        },
        "kind": "class",
        "comment": "\nA typical entity system. Use this when you need to process entities possessing the\nprovided component types.\n\n",
        "name": "EntityProcessingSystem",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nCreate a new [EntityProcessingSystem]. It requires at least one component.\n\n",
            "name": "EntityProcessingSystem",
            "children": [
              {
                "ref": {
                  "name": "Aspect",
                  "refId": "Aspect"
                },
                "kind": "param",
                "name": "aspect",
                "id": "aspect"
              }
            ],
            "id": "EntityProcessingSystem1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nProcess a [entity] this system is interested in.\n\n",
            "name": "processEntity",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "entity",
                "id": "entity"
              }
            ],
            "id": "processEntity1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "processEntities",
            "children": [
              {
                "ref": {
                  "name": "ImmutableBag",
                  "refId": "ImmutableBag",
                  "arguments": [
                    {
                      "name": "Entity",
                      "refId": "Entity"
                    }
                  ]
                },
                "kind": "param",
                "name": "entities",
                "id": "entities"
              }
            ],
            "id": "processEntities1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "checkProcessing",
            "id": "checkProcessing0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nCreate a new [EntityProcessingSystem]. It requires at least one component.\n\n",
            "name": "EntityProcessingSystem",
            "children": [
              {
                "ref": {
                  "name": "Aspect",
                  "refId": "Aspect"
                },
                "kind": "param",
                "name": "aspect",
                "id": "aspect"
              }
            ],
            "id": "EntityProcessingSystem1()"
          }
        ],
        "id": "EntityProcessingSystem"
      },
      {
        "interfaces": [
          {
            "name": "EntityObserver",
            "refId": "EntityObserver"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nThe most raw entity system. It should not typically be used, but you can create your own\nentity system handling by extending this. It is recommended that you use the other provided\nentity system implementations.\n\nThere is no need to ever call any other method than process on objects of this class.\n\n",
        "name": "EntitySystem",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "EntitySystem",
            "children": [
              {
                "ref": {
                  "name": "Aspect",
                  "refId": "Aspect"
                },
                "kind": "param",
                "name": "aspect",
                "id": "aspect"
              }
            ],
            "id": "EntitySystem1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "passive",
            "id": "passive0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCalled before processing of entities begins.\n\n",
            "name": "begin",
            "id": "begin0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nThis is the only method that is supposed to be called from outside the library,\n\n",
            "name": "process",
            "id": "process0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCalled after the processing of entities ends.\n\n",
            "name": "end",
            "id": "end0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAny implementing entity system must implement this method and the logic\nto process the given [entities] of the system.\n\n",
            "name": "processEntities",
            "children": [
              {
                "ref": {
                  "name": "ImmutableBag",
                  "refId": "ImmutableBag",
                  "arguments": [
                    {
                      "name": "Entity",
                      "refId": "Entity"
                    }
                  ]
                },
                "kind": "param",
                "name": "entities",
                "id": "entities"
              }
            ],
            "id": "processEntities1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if the system should be processed, false if not.\n\n",
            "name": "checkProcessing",
            "id": "checkProcessing0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nOverride to implement code that gets executed when systems are initialized.\n\n",
            "name": "initialize",
            "id": "initialize0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCalled if the system has received an [entity] it is interested in, e.g. created or a component was added to it.\n\n",
            "name": "inserted",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "entity",
                "id": "entity"
              }
            ],
            "id": "inserted1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCalled if an [entity] was removed from this system, e.g. deleted or had one of it's components removed.\n\n",
            "name": "removed",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "entity",
                "id": "entity"
              }
            ],
            "id": "removed1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_check",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_check1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "_contains",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_contains1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_insertToSystem",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_insertToSystem1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_removeFromSystem",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_removeFromSystem1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "added",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "added1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "changed",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "changed1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "enabled",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "enabled1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "deleted",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "deleted1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "disabled",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "disabled1()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "passive",
            "id": "passive"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_systemBit",
            "id": "_systemBit"
          },
          {
            "ref": {
              "name": "World",
              "refId": "World"
            },
            "kind": "property",
            "name": "world",
            "id": "world"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                }
              ]
            },
            "kind": "property",
            "name": "_actives",
            "id": "_actives"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_all",
            "id": "_all"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_excluded",
            "id": "_excluded"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_one",
            "id": "_one"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_dummy",
            "id": "_dummy"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_passive",
            "id": "_passive"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "EntitySystem",
            "children": [
              {
                "ref": {
                  "name": "Aspect",
                  "refId": "Aspect"
                },
                "kind": "param",
                "name": "aspect",
                "id": "aspect"
              }
            ],
            "id": "EntitySystem1()"
          }
        ],
        "id": "EntitySystem"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "EntityObserver",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "added",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "added1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "changed",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "changed1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "deleted",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "deleted1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "enabled",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "enabled1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "disabled",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "disabled1()"
          }
        ],
        "id": "EntityObserver"
      },
      {
        "superclass": {
          "name": "Manager",
          "refId": "Manager"
        },
        "kind": "class",
        "name": "EntityManager",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "EntityManager",
            "id": "EntityManager0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "id": "initialize0()"
          },
          {
            "returnType": {
              "name": "Entity",
              "refId": "Entity"
            },
            "kind": "method",
            "name": "_createEntityInstance",
            "id": "_createEntityInstance0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "added",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "added1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "enabled",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "enabled1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "disabled",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "disabled1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "deleted",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "deleted1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nCheck if this entity is active.\nActive means the entity is being actively processed.\n\n",
            "name": "isActive",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "entityId",
                "id": "entityId"
              }
            ],
            "id": "isActive1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nCheck if the specified entityId is enabled.\n\n",
            "name": "isEnabled",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "entityId",
                "id": "entityId"
              }
            ],
            "id": "isEnabled1()"
          },
          {
            "returnType": {
              "name": "Entity",
              "refId": "Entity"
            },
            "kind": "method",
            "comment": "\nGet a entity with this id.\n\n",
            "name": "_getEntity",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "entityId",
                "id": "entityId"
              }
            ],
            "id": "_getEntity1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nGet how many entities are active in this world.\n\n",
            "name": "activeEntityCount",
            "id": "activeEntityCount0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nGet how many entities have been created in the world since start.\nNote: A created entity may not have been added to the world, thus\ncreated count is always equal or larger than added count.\n\n",
            "name": "totalCreated",
            "id": "totalCreated0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nGet how many entities have been added to the world since start.\n\n",
            "name": "totalAdded",
            "id": "totalAdded0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nGet how many entities have been deleted from the world since start.\n\n",
            "name": "totalDeleted",
            "id": "totalDeleted0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nGet how many entities are active in this world.\n\n",
            "name": "activeEntityCount",
            "id": "activeEntityCount"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nGet how many entities have been created in the world since start.\nNote: A created entity may not have been added to the world, thus\ncreated count is always equal or larger than added count.\n\n",
            "name": "totalCreated",
            "id": "totalCreated"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nGet how many entities have been added to the world since start.\n\n",
            "name": "totalAdded",
            "id": "totalAdded"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nGet how many entities have been deleted from the world since start.\n\n",
            "name": "totalDeleted",
            "id": "totalDeleted"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                }
              ]
            },
            "kind": "property",
            "name": "_entities",
            "id": "_entities"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "bool",
                  "refId": "bool"
                }
              ]
            },
            "kind": "property",
            "name": "_disabled",
            "id": "_disabled"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_active",
            "id": "_active"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_added",
            "id": "_added"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_created",
            "id": "_created"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_deleted",
            "id": "_deleted"
          },
          {
            "ref": {
              "name": "_IdentifierPool",
              "refId": "_IdentifierPool"
            },
            "kind": "property",
            "name": "_identifierPool",
            "id": "_identifierPool"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "EntityManager",
            "id": "EntityManager0()"
          }
        ],
        "id": "EntityManager"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nThe entity class. Cannot be instantiated outside the framework, you must\ncreate new entities using World.\n\n",
        "name": "Entity",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Entity",
            "children": [
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "_world",
                "id": "_world"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "id",
                "id": "id"
              }
            ],
            "id": "Entity2()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nGet the unique ID of this entity. Because entity instances are reused internally use this to identify between different instances.\n\n",
            "name": "uniqueId",
            "id": "uniqueId0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_addTypeBit",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "bit",
                "id": "bit"
              }
            ],
            "id": "_addTypeBit1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_removeTypeBit",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "bit",
                "id": "bit"
              }
            ],
            "id": "_removeTypeBit1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_addSystemBit",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "bit",
                "id": "bit"
              }
            ],
            "id": "_addSystemBit1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_removeSystemBit",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "bit",
                "id": "bit"
              }
            ],
            "id": "_removeSystemBit1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_reset",
            "id": "_reset0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAdd a [component] to this entity.\n\n",
            "name": "addComponent",
            "children": [
              {
                "ref": {
                  "name": "Component",
                  "refId": "Component"
                },
                "kind": "param",
                "name": "component",
                "id": "component"
              }
            ],
            "id": "addComponent1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nRemoves the [component] from this entity.\n\n",
            "name": "removeComponent",
            "children": [
              {
                "ref": {
                  "name": "Component",
                  "refId": "Component"
                },
                "kind": "param",
                "name": "component",
                "id": "component"
              }
            ],
            "id": "removeComponent1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nFaster removal of components by [type] from a entity.\n\n",
            "name": "removeComponentByType",
            "children": [
              {
                "ref": {
                  "name": "ComponentType",
                  "refId": "ComponentType"
                },
                "kind": "param",
                "name": "type",
                "id": "type"
              }
            ],
            "id": "removeComponentByType1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nChecks if the entity has been deleted from somewhere.\nReturns [:true:] if it's active.\n\n",
            "name": "active",
            "id": "active0()"
          },
          {
            "returnType": {
              "name": "Component",
              "refId": "Component"
            },
            "kind": "method",
            "comment": "\nThis is the preferred method to use when retrieving a [Component] from an entity. It will provide good performance.\n\nIn order to retrieve the component fast you must provide a [ComponentType] instance for the expected component.\n\nReturns the [Component].\n\n",
            "name": "getComponent",
            "children": [
              {
                "ref": {
                  "name": "ComponentType",
                  "refId": "ComponentType"
                },
                "kind": "param",
                "name": "type",
                "id": "type"
              }
            ],
            "id": "getComponent1()"
          },
          {
            "returnType": {
              "name": "Component",
              "refId": "Component"
            },
            "kind": "method",
            "comment": "\nSlower retrieval of a [Component] from this entity. Minimize usage of this, but is fine to use e.g. when creating new entities\nand setting data in components.\n\nReturns [:null:] if none is found.\n\n",
            "name": "getComponentByClass",
            "children": [
              {
                "ref": {
                  "name": "Type",
                  "refId": "Type"
                },
                "kind": "param",
                "name": "componentType",
                "id": "componentType"
              }
            ],
            "id": "getComponentByClass1()"
          },
          {
            "returnType": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Component",
                  "refId": "Component"
                }
              ]
            },
            "kind": "method",
            "comment": "\nGet all components belonging to this entity.\n\n",
            "name": "getComponents",
            "children": [
              {
                "ref": {
                  "name": "Bag",
                  "refId": "Bag",
                  "arguments": [
                    {
                      "name": "Component",
                      "refId": "Component"
                    }
                  ]
                },
                "isOptional": true,
                "kind": "param",
                "name": "fillBag",
                "id": "fillBag"
              }
            ],
            "id": "getComponents1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAdds the entity to the world.\n\n",
            "name": "addToWorld",
            "id": "addToWorld0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "deleteFromWorld",
            "id": "deleteFromWorld0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "disable",
            "id": "disable0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "changedInWorld",
            "id": "changedInWorld0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "enable",
            "id": "enable0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nGet the unique ID of this entity. Because entity instances are reused internally use this to identify between different instances.\n\n",
            "name": "uniqueId",
            "id": "uniqueId"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "comment": "\nChecks if the entity has been deleted from somewhere.\nReturns [:true:] if it's active.\n\n",
            "name": "active",
            "id": "active"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "id",
            "id": "id"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_uniqueId",
            "id": "_uniqueId"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_typeBits",
            "id": "_typeBits"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_systemBits",
            "id": "_systemBits"
          },
          {
            "ref": {
              "name": "World",
              "refId": "World"
            },
            "kind": "property",
            "name": "_world",
            "id": "_world"
          },
          {
            "ref": {
              "name": "EntityManager",
              "refId": "EntityManager"
            },
            "kind": "property",
            "name": "_entityManager",
            "id": "_entityManager"
          },
          {
            "ref": {
              "name": "ComponentManager",
              "refId": "ComponentManager"
            },
            "kind": "property",
            "name": "_componentManager",
            "id": "_componentManager"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Entity",
            "children": [
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "_world",
                "id": "_world"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "id",
                "id": "id"
              }
            ],
            "id": "Entity2()"
          }
        ],
        "id": "Entity"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nAn Aspect is used by systems as a matcher against entities, to check if a system is\ninterested in an entity. Aspects define what sort of component types an entity must\npossess, or not possess.\n\nThis creates an aspect where an entity must possess A and B and C:\n    Aspect.getAspectForAllOf([A, B, C])\n\nThis creates an aspect where an entity must possess A and B and C, but must not possess U or V.\n    Aspect.getAspectForAllOf([A, B, C]).exclude([U, V])\n\nThis creates an aspect where an entity must possess A and B and C, but must not possess U or V, but must possess one of X or Y or Z.\n    Aspect.getAspectForAllOf([A, B, C]).exclude([U, V]).oneOf([X, Y, Z])\n\nYou can create and compose aspects in many ways:\n    Aspect.getEmpty().oneOf([X, Y, Z]).allOf([A, B, C]).exclude([U, V])\nis the same as:\n    Aspect.getAspectForAllOf([A, B, C]).exclude([U, V]).oneOf([X, Y, Z])\n\n",
        "name": "Aspect",
        "children": [
          {
            "returnType": {
              "name": "Aspect",
              "refId": "Aspect"
            },
            "kind": "method",
            "comment": "\nReturns an aspect where an entity must possess all of the specified components.\n\n",
            "name": "allOf",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Type",
                      "refId": "Type"
                    }
                  ]
                },
                "kind": "param",
                "name": "componentTypes",
                "id": "componentTypes"
              }
            ],
            "id": "allOf1()"
          },
          {
            "returnType": {
              "name": "Aspect",
              "refId": "Aspect"
            },
            "kind": "method",
            "comment": "\nExcludes all of the specified components from the aspect. A system will not be\ninterested in an entity that possesses one of the specified excluded components.\n\nReturns an aspect that can be matched against entities.\n\n",
            "name": "exclude",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Type",
                      "refId": "Type"
                    }
                  ]
                },
                "kind": "param",
                "name": "componentTypes",
                "id": "componentTypes"
              }
            ],
            "id": "exclude1()"
          },
          {
            "returnType": {
              "name": "Aspect",
              "refId": "Aspect"
            },
            "kind": "method",
            "comment": "\nReturns an aspect where an entity must possess one of the specified components.\n\n",
            "name": "oneOf",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Type",
                      "refId": "Type"
                    }
                  ]
                },
                "kind": "param",
                "name": "componentTypes",
                "id": "componentTypes"
              }
            ],
            "id": "oneOf1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Aspect",
              "refId": "Aspect"
            },
            "kind": "method",
            "comment": "\nCreates an aspect where an entity must possess all of the specified components.\n\n",
            "name": "getAspectForAllOf",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Type",
                      "refId": "Type"
                    }
                  ]
                },
                "kind": "param",
                "name": "componentTypes",
                "id": "componentTypes"
              }
            ],
            "id": "getAspectForAllOf1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nCreates an aspect where an entity must possess one of the specified componens.\n\n",
            "name": "getAspectForOneOf",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Type",
                      "refId": "Type"
                    }
                  ]
                },
                "kind": "param",
                "name": "componentTypes",
                "id": "componentTypes"
              }
            ],
            "id": "getAspectForOneOf1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Aspect",
              "refId": "Aspect"
            },
            "kind": "method",
            "comment": "\nCreates and returns an empty aspect. This can be used if you want a system that processes no entities, but\nstill gets invoked. Typical usages is when you need to create special purpose systems for debug rendering,\nlike rendering FPS, how many entities are active in the world, etc.\n\nYou can also use the all, one and exclude methods on this aspect, so if you wanted to create a system that\nprocesses only entities possessing just one of the components A or B or C, then you can do:\nAspect.getEmpty().one(\"A\", \"B\", \"C\");\n\nReturns an empty Aspect that will reject all entities.\n\n",
            "name": "getEmpty",
            "id": "getEmpty0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "all",
            "id": "all0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "excluded",
            "id": "excluded0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "one",
            "id": "one0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "_updateBitMask",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "mask",
                "id": "mask"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Type",
                      "refId": "Type"
                    }
                  ]
                },
                "kind": "param",
                "name": "componentTypes",
                "id": "componentTypes"
              }
            ],
            "id": "_updateBitMask2()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "all",
            "id": "all"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "excluded",
            "id": "excluded"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "one",
            "id": "one"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_all",
            "id": "_all"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_excluded",
            "id": "_excluded"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_one",
            "id": "_one"
          }
        ],
        "id": "Aspect"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ComponentTypeManager",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "ComponentType",
              "refId": "ComponentType"
            },
            "kind": "method",
            "name": "getTypeFor",
            "children": [
              {
                "ref": {
                  "name": "Type",
                  "refId": "Type"
                },
                "kind": "param",
                "name": "componentType",
                "id": "componentType"
              }
            ],
            "id": "getTypeFor1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "getBit",
            "children": [
              {
                "ref": {
                  "name": "Type",
                  "refId": "Type"
                },
                "kind": "param",
                "name": "componentType",
                "id": "componentType"
              }
            ],
            "id": "getBit1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "getId",
            "children": [
              {
                "ref": {
                  "name": "Type",
                  "refId": "Type"
                },
                "kind": "param",
                "name": "componentType",
                "id": "componentType"
              }
            ],
            "id": "getId1()"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_componentTypes",
            "id": "_componentTypes"
          }
        ],
        "id": "ComponentTypeManager"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ComponentType",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ComponentType",
            "id": "ComponentType0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "_init",
            "id": "_init0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "bit",
            "id": "bit0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "id",
            "id": "id0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "bit",
            "id": "bit"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "id",
            "id": "id"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_nextBit",
            "id": "_nextBit"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_nextId",
            "id": "_nextId"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "_bit",
            "id": "_bit"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "_id",
            "id": "_id"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ComponentType",
            "id": "ComponentType0()"
          }
        ],
        "id": "ComponentType"
      },
      {
        "superclass": {
          "name": "Manager",
          "refId": "Manager"
        },
        "kind": "class",
        "name": "ComponentManager",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ComponentManager",
            "id": "ComponentManager0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "id": "initialize0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_removeComponentsOfEntity",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "_removeComponentsOfEntity1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_addComponent",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "ComponentType",
                  "refId": "ComponentType"
                },
                "kind": "param",
                "name": "type",
                "id": "type"
              },
              {
                "ref": {
                  "name": "Component",
                  "refId": "Component"
                },
                "kind": "param",
                "name": "component",
                "id": "component"
              }
            ],
            "id": "_addComponent3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_removeComponent",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "ComponentType",
                  "refId": "ComponentType"
                },
                "kind": "param",
                "name": "type",
                "id": "type"
              }
            ],
            "id": "_removeComponent2()"
          },
          {
            "returnType": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Component",
                  "refId": "Component"
                }
              ]
            },
            "kind": "method",
            "name": "getComponentsByType",
            "children": [
              {
                "ref": {
                  "name": "ComponentType",
                  "refId": "ComponentType"
                },
                "kind": "param",
                "name": "type",
                "id": "type"
              }
            ],
            "id": "getComponentsByType1()"
          },
          {
            "returnType": {
              "name": "Component",
              "refId": "Component"
            },
            "kind": "method",
            "name": "_getComponent",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "ComponentType",
                  "refId": "ComponentType"
                },
                "kind": "param",
                "name": "type",
                "id": "type"
              }
            ],
            "id": "_getComponent2()"
          },
          {
            "returnType": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Component",
                  "refId": "Component"
                }
              ]
            },
            "kind": "method",
            "name": "getComponentsFor",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "Bag",
                  "refId": "Bag",
                  "arguments": [
                    {
                      "name": "Component",
                      "refId": "Component"
                    }
                  ]
                },
                "kind": "param",
                "name": "fillBag",
                "id": "fillBag"
              }
            ],
            "id": "getComponentsFor2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_forComponentsOfEntity",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "_forComponentsOfEntity2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "deleted",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "deleted1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "clean",
            "id": "clean0()"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Bag",
                  "refId": "Bag",
                  "arguments": [
                    {
                      "name": "Component",
                      "refId": "Component"
                    }
                  ]
                }
              ]
            },
            "kind": "property",
            "name": "_componentsByType",
            "id": "_componentsByType"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Entity",
                  "refId": "Entity"
                }
              ]
            },
            "kind": "property",
            "name": "_deleted",
            "id": "_deleted"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ComponentManager",
            "id": "ComponentManager0()"
          }
        ],
        "id": "ComponentManager"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nHigh performance component retrieval from entities. Use this wherever you need\nto retrieve components from entities often and fast.\n\n",
        "name": "ComponentMapper",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ComponentMapper",
            "children": [
              {
                "ref": {
                  "name": "Type",
                  "refId": "Type"
                },
                "kind": "param",
                "name": "componentType",
                "id": "componentType"
              },
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "world",
                "id": "world"
              }
            ],
            "id": "ComponentMapper2()"
          },
          {
            "returnType": {
              "name": "A",
              "refId": "A"
            },
            "kind": "method",
            "comment": "\nFast but unsafe retrieval of a component for this entity.\nNo bounding checks, so this could throw an ArrayIndexOutOfBoundsExeption,\nhowever in most scenarios you already know the entity possesses this component.\n\n",
            "name": "get",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "get1()"
          },
          {
            "returnType": {
              "name": "A",
              "refId": "A"
            },
            "kind": "method",
            "comment": "\nFast and safe retrieval of a component for this entity.\nIf the entity does not have this component then null is returned.\n\n",
            "name": "getSafe",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "getSafe1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nChecks if the entity has this type of component.\n\n",
            "name": "has",
            "children": [
              {
                "ref": {
                  "name": "Entity",
                  "refId": "Entity"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              }
            ],
            "id": "has1()"
          },
          {
            "ref": {
              "name": "ComponentType",
              "refId": "ComponentType"
            },
            "kind": "property",
            "name": "_type",
            "id": "_type"
          },
          {
            "ref": {
              "name": "Bag",
              "refId": "Bag",
              "arguments": [
                {
                  "name": "Component",
                  "refId": "Component"
                }
              ]
            },
            "kind": "property",
            "name": "_components",
            "id": "_components"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ComponentMapper",
            "children": [
              {
                "ref": {
                  "name": "Type",
                  "refId": "Type"
                },
                "kind": "param",
                "name": "componentType",
                "id": "componentType"
              },
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "world",
                "id": "world"
              }
            ],
            "id": "ComponentMapper2()"
          }
        ],
        "id": "ComponentMapper"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nA tag class. All components in the system must extend this class.\n\n",
        "name": "Component",
        "id": "Component"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Utils",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "cubicInterpolation",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "v0",
                "id": "v0"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "v1",
                "id": "v1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "v2",
                "id": "v2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "v3",
                "id": "v3"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "t",
                "id": "t"
              }
            ],
            "id": "cubicInterpolation5()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "quadraticBezierInterpolation",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "c",
                "id": "c"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "t",
                "id": "t"
              }
            ],
            "id": "quadraticBezierInterpolation4()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "lengthOfQuadraticBezierCurve",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x0",
                "id": "x0"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y0",
                "id": "y0"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x1",
                "id": "x1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y1",
                "id": "y1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x2",
                "id": "x2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y2",
                "id": "y2"
              }
            ],
            "id": "lengthOfQuadraticBezierCurve6()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "lerp",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "t",
                "id": "t"
              }
            ],
            "id": "lerp3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "distance",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x1",
                "id": "x1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y1",
                "id": "y1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x2",
                "id": "x2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y2",
                "id": "y2"
              }
            ],
            "id": "distance4()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "doCirclesCollide",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x1",
                "id": "x1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y1",
                "id": "y1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radius1",
                "id": "radius1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x2",
                "id": "x2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y2",
                "id": "y2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radius2",
                "id": "radius2"
              }
            ],
            "id": "doCirclesCollide6()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "euclideanDistanceSq2D",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x1",
                "id": "x1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y1",
                "id": "y1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x2",
                "id": "x2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y2",
                "id": "y2"
              }
            ],
            "id": "euclideanDistanceSq2D4()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "manhattanDistance",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x1",
                "id": "x1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y1",
                "id": "y1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x2",
                "id": "x2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y2",
                "id": "y2"
              }
            ],
            "id": "manhattanDistance4()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "euclideanDistance",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x1",
                "id": "x1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y1",
                "id": "y1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x2",
                "id": "x2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y2",
                "id": "y2"
              }
            ],
            "id": "euclideanDistance4()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "angleInDegreesWithOwnerRotation",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "ownerRotation",
                "id": "ownerRotation"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x1",
                "id": "x1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y1",
                "id": "y1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x2",
                "id": "x2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y2",
                "id": "y2"
              }
            ],
            "id": "angleInDegreesWithOwnerRotation5()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "angleInDegrees",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "originX",
                "id": "originX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "originY",
                "id": "originY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "targetX",
                "id": "targetX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "targetY",
                "id": "targetY"
              }
            ],
            "id": "angleInDegrees4()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "toDegrees",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "rad",
                "id": "rad"
              }
            ],
            "id": "toDegrees1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "angleInRadians",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "originX",
                "id": "originX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "originY",
                "id": "originY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "targetX",
                "id": "targetX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "targetY",
                "id": "targetY"
              }
            ],
            "id": "angleInRadians4()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "shouldRotateCounterClockwise",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angleFrom",
                "id": "angleFrom"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angleTo",
                "id": "angleTo"
              }
            ],
            "id": "shouldRotateCounterClockwise2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "getRotatedX",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "currentX",
                "id": "currentX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "currentY",
                "id": "currentY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "pivotX",
                "id": "pivotX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "pivotY",
                "id": "pivotY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angleDegrees",
                "id": "angleDegrees"
              }
            ],
            "id": "getRotatedX5()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "getRotatedY",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "currentX",
                "id": "currentX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "currentY",
                "id": "currentY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "pivotX",
                "id": "pivotX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "pivotY",
                "id": "pivotY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angleDegrees",
                "id": "angleDegrees"
              }
            ],
            "id": "getRotatedY5()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "getXAtEndOfRotatedLineByOrigin",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "lineLength",
                "id": "lineLength"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angleDegrees",
                "id": "angleDegrees"
              }
            ],
            "id": "getXAtEndOfRotatedLineByOrigin3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "getYAtEndOfRotatedLineByOrigin",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "lineLength",
                "id": "lineLength"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angleDegrees",
                "id": "angleDegrees"
              }
            ],
            "id": "getYAtEndOfRotatedLineByOrigin3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "collides",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x1",
                "id": "x1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y1",
                "id": "y1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radius1",
                "id": "radius1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x2",
                "id": "x2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y2",
                "id": "y2"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radius2",
                "id": "radius2"
              }
            ],
            "id": "collides6()"
          }
        ],
        "id": "Utils"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ImmutableBag",
        "children": [
          {
            "isOperator": true,
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "name": "[]",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "[]1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "size",
            "id": "size0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isEmpty",
            "id": "isEmpty0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nApplies the function [f] to each element of this collection.\n\n",
            "name": "forEach",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "forEach1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "size",
            "id": "size"
          }
        ],
        "id": "ImmutableBag"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nUsing these function will save you some time if you are doing A LOT of calculation.\n\n",
        "name": "FastMath",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "cos",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              }
            ],
            "id": "cos1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "sin",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              }
            ],
            "id": "sin1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "tan",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              }
            ],
            "id": "tan1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "asin",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              }
            ],
            "id": "asin1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "acos",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              }
            ],
            "id": "acos1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "double",
              "refId": "double"
            },
            "kind": "method",
            "name": "atan",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              }
            ],
            "id": "atan1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "signum",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              }
            ],
            "id": "signum1()"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "PI",
            "id": "PI"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SQUARED_PI",
            "id": "SQUARED_PI"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "HALF_PI",
            "id": "HALF_PI"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "TWO_PI",
            "id": "TWO_PI"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "THREE_PI_HALVES",
            "id": "THREE_PI_HALVES"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_sin_a",
            "id": "_sin_a"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_sin_b",
            "id": "_sin_b"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_sin_p",
            "id": "_sin_p"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_asin_a",
            "id": "_asin_a"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_asin_b",
            "id": "_asin_b"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_asin_c",
            "id": "_asin_c"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_asin_d",
            "id": "_asin_d"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_atan_a",
            "id": "_atan_a"
          }
        ],
        "id": "FastMath"
      },
      {
        "interfaces": [
          {
            "name": "ImmutableBag",
            "refId": "ImmutableBag",
            "arguments": [
              {
                "name": "E",
                "refId": "E"
              }
            ]
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nCollection type a bit like List but does not preserve the order of its\nentities, speedwise it is very good, especially suited for games.\n\n",
        "name": "Bag",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Bag",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "capacity",
                "id": "capacity"
              }
            ],
            "id": "Bag1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "comment": "\nReturns the element at the specified [index] in the bag.\n\n",
            "name": "[]",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "[]1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nReturns the number of elements in this bag.\n\n",
            "name": "size",
            "id": "size0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns [:true:] if this list contains no elements.\n\n",
            "name": "isEmpty",
            "id": "isEmpty0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "forEach",
            "children": [
              {
                "ref": {
                  "name": "Function",
                  "refId": "Function"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "forEach1()"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "comment": "\nRemoves the element at the specified [index] in this bag. Does this by\noverwriting with the last element and then removing the last element.\n\n",
            "name": "removeAt",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "removeAt1()"
          },
          {
            "returnType": {
              "name": "E",
              "refId": "E"
            },
            "kind": "method",
            "comment": "\nRemove and return the last object in the bag.\n\n",
            "name": "removeLast",
            "id": "removeLast0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nRemoves the first occurrence of the specified element from this bag, if\nit is present. If the Bag does not contain the element, it is unchanged.\nDoes this by overwriting with the last element and then removing the last\nelement.\nReturns [:true:] if this list contained the specified element.\n\n",
            "name": "remove",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "o",
                "id": "o"
              }
            ],
            "id": "remove1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nCheck if this bag contains this element.\n\n@param o\n@return\n\n",
            "name": "contains",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "o",
                "id": "o"
              }
            ],
            "id": "contains1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nRemoves from this Bag all of its elements that are contained in the\nspecified [bag].\n\nRetur s [:true:] if this Bag changed as a result of the call\n\n",
            "name": "removeAll",
            "children": [
              {
                "ref": {
                  "name": "Bag",
                  "refId": "Bag",
                  "arguments": [
                    {
                      "name": "E",
                      "refId": "E"
                    }
                  ]
                },
                "kind": "param",
                "name": "bag",
                "id": "bag"
              }
            ],
            "id": "removeAll1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nReturns the number of elements the bag can hold without growing.\n\n",
            "name": "capacity",
            "id": "capacity0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAdds the specified element [o] to the end of this bag. if needed also\nincreases the capacity of the bag.\n\n",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "o",
                "id": "o"
              }
            ],
            "id": "add1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSet element [o] at specified [index] in the bag.\n\n",
            "name": "[]=",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              },
              {
                "ref": {
                  "name": "E",
                  "refId": "E"
                },
                "kind": "param",
                "name": "o",
                "id": "o"
              }
            ],
            "id": "[]=2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_grow",
            "id": "_grow0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_growTo",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "newCapacity",
                "id": "newCapacity"
              }
            ],
            "id": "_growTo1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_ensureCapacity",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "_ensureCapacity1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nRemoves all of the elements from this bag. The bag will be empty after\nthis call returns.\n\n",
            "name": "clear",
            "id": "clear0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAdd all [items] into this bag.\n\n",
            "name": "addAll",
            "children": [
              {
                "ref": {
                  "name": "Bag",
                  "refId": "Bag",
                  "arguments": [
                    {
                      "name": "E",
                      "refId": "E"
                    }
                  ]
                },
                "kind": "param",
                "name": "items",
                "id": "items"
              }
            ],
            "id": "addAll1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "isIndexWithinBounds",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "isIndexWithinBounds1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nReturns the number of elements in this bag.\n\n",
            "name": "size",
            "id": "size"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nReturns the number of elements the bag can hold without growing.\n\n",
            "name": "capacity",
            "id": "capacity"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List"
            },
            "kind": "property",
            "name": "_data",
            "id": "_data"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_size",
            "id": "_size"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Bag",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "capacity",
                "id": "capacity"
              }
            ],
            "id": "Bag1()"
          }
        ],
        "id": "Bag"
      }
    ],
    "id": "file:///E:/Programming/workspaces/dart/dartemis/lib/dartemis.dart"
  }
]